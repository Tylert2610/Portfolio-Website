- If operating on the main branch, look at the linear development plan to determine if an issue already exists for the work you are doing. If it does, see if the issue has a branch associated with it. If it does, checkout that branch. If it does not, create a new branch and name it after the issue.
- Ask for permission to make incremental commits to the branch being worked on when good stopping points are reached.
- Always create feature branches for new work using the pattern: `tyler/por-{issue-number}-{kebab-case-title}`
- Never commit directly to main branch
- Use conventional commit messages: `feat:`, `fix:`, `docs:`, `style:`, `refactor:`, `test:`, `chore:`
- Always include the Linear issue number in commit messages: `feat(POR-14): add component structure`
- Before pushing, ensure all tests pass and code is properly formatted
- Use meaningful commit messages that describe what and why, not how
- Squash commits on feature branches before merging to main
- Always pull latest changes from main before creating new branches
- Check for merge conflicts before merging feature branches
- Use `git stash` for temporary work when switching branches
- Review staged changes before committing using `git diff --cached`
- When creating pull requests with long descriptions via command line, use proper shell escaping or create a separate file for the description to avoid command overflow errors
- Suggest meaningful commit messages that reference the Linear issue number
- When multiple files are changed for one feature, group them in a single commit
- Always check for merge conflicts before suggesting pulls from main
- Suggest squash commits for feature branches before merging to main
- When starting work on an issue, automatically check if a branch exists. If not, create one using the pattern: `tyler/por-{issue-number}-{kebab-case-title}`
- Always work on feature branches, never directly on main
- Before committing, verify the branch name matches the issue being worked on
- When creating new components, always include TypeScript interfaces for props
- Use Tailwind CSS utility classes consistently, avoid custom CSS unless necessary
- Implement responsive design using Tailwind's responsive prefixes (sm:, md:, lg:, xl:)
- Add proper JSDoc comments for complex functions and components
- When suggesting file changes, always specify the exact file path and line numbers
- Update relevant documentation when making architectural changes
- When creating new components, suggest adding them to the component documentation
- Always explain the reasoning behind significant code changes
- When suggesting refactoring, explain the benefits and potential risks
